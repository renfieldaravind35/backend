{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#!/bin/sh\n",
        "# ----------------------------------------------------------------------------\n",
        "# Licensed to the Apache Software Foundation (ASF) under one\n",
        "# or more contributor license agreements.  See the NOTICE file\n",
        "# distributed with this work for additional information\n",
        "# regarding copyright ownership.  The ASF licenses this file\n",
        "# to you under the Apache License, Version 2.0 (the\n",
        "# \"License\"); you may not use this file except in compliance\n",
        "# with the License.  You may obtain a copy of the License at\n",
        "#\n",
        "#    https://www.apache.org/licenses/LICENSE-2.0\n",
        "#\n",
        "# Unless required by applicable law or agreed to in writing,\n",
        "# software distributed under the License is distributed on an\n",
        "# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n",
        "# KIND, either express or implied.  See the License for the\n",
        "# specific language governing permissions and limitations\n",
        "# under the License.\n",
        "# ----------------------------------------------------------------------------\n",
        "\n",
        "# ----------------------------------------------------------------------------\n",
        "# Maven Start Up Batch script\n",
        "#\n",
        "# Required ENV vars:\n",
        "# ------------------\n",
        "#   JAVA_HOME - location of a JDK home dir\n",
        "#\n",
        "# Optional ENV vars\n",
        "# -----------------\n",
        "#   M2_HOME - location of maven2's installed home dir\n",
        "#   MAVEN_OPTS - parameters passed to the Java VM when running Maven\n",
        "#     e.g. to debug Maven itself, use\n",
        "#       set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000\n",
        "#   MAVEN_SKIP_RC - flag to disable loading of mavenrc files\n",
        "# ----------------------------------------------------------------------------\n",
        "\n",
        "if [ -z \"$MAVEN_SKIP_RC\" ] ; then\n",
        "\n",
        "  if [ -f /usr/local/etc/mavenrc ] ; then\n",
        "    . /usr/local/etc/mavenrc\n",
        "  fi\n",
        "\n",
        "  if [ -f /etc/mavenrc ] ; then\n",
        "    . /etc/mavenrc\n",
        "  fi\n",
        "\n",
        "  if [ -f \"$HOME/.mavenrc\" ] ; then\n",
        "    . \"$HOME/.mavenrc\"\n",
        "  fi\n",
        "\n",
        "fi\n",
        "\n",
        "# OS specific support.  $var _must_ be set to either true or false.\n",
        "cygwin=false;\n",
        "darwin=false;\n",
        "mingw=false\n",
        "case \"`uname`\" in\n",
        "  CYGWIN*) cygwin=true ;;\n",
        "  MINGW*) mingw=true;;\n",
        "  Darwin*) darwin=true\n",
        "    # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home\n",
        "    # See https://developer.apple.com/library/mac/qa/qa1170/_index.html\n",
        "    if [ -z \"$JAVA_HOME\" ]; then\n",
        "      if [ -x \"/usr/libexec/java_home\" ]; then\n",
        "        export JAVA_HOME=\"`/usr/libexec/java_home`\"\n",
        "      else\n",
        "        export JAVA_HOME=\"/Library/Java/Home\"\n",
        "      fi\n",
        "    fi\n",
        "    ;;\n",
        "esac\n",
        "\n",
        "if [ -z \"$JAVA_HOME\" ] ; then\n",
        "  if [ -r /etc/gentoo-release ] ; then\n",
        "    JAVA_HOME=`java-config --jre-home`\n",
        "  fi\n",
        "fi\n",
        "\n",
        "if [ -z \"$M2_HOME\" ] ; then\n",
        "  ## resolve links - $0 may be a link to maven's home\n",
        "  PRG=\"$0\"\n",
        "\n",
        "  # need this for relative symlinks\n",
        "  while [ -h \"$PRG\" ] ; do\n",
        "    ls=`ls -ld \"$PRG\"`\n",
        "    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n",
        "    if expr \"$link\" : '/.*' > /dev/null; then\n",
        "      PRG=\"$link\"\n",
        "    else\n",
        "      PRG=\"`dirname \"$PRG\"`/$link\"\n",
        "    fi\n",
        "  done\n",
        "\n",
        "  saveddir=`pwd`\n",
        "\n",
        "  M2_HOME=`dirname \"$PRG\"`/..\n",
        "\n",
        "  # make it fully qualified\n",
        "  M2_HOME=`cd \"$M2_HOME\" && pwd`\n",
        "\n",
        "  cd \"$saveddir\"\n",
        "  # echo Using m2 at $M2_HOME\n",
        "fi\n",
        "\n",
        "# For Cygwin, ensure paths are in UNIX format before anything is touched\n",
        "if $cygwin ; then\n",
        "  [ -n \"$M2_HOME\" ] &&\n",
        "    M2_HOME=`cygpath --unix \"$M2_HOME\"`\n",
        "  [ -n \"$JAVA_HOME\" ] &&\n",
        "    JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n",
        "  [ -n \"$CLASSPATH\" ] &&\n",
        "    CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`\n",
        "fi\n",
        "\n",
        "# For Mingw, ensure paths are in UNIX format before anything is touched\n",
        "if $mingw ; then\n",
        "  [ -n \"$M2_HOME\" ] &&\n",
        "    M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"\n",
        "  [ -n \"$JAVA_HOME\" ] &&\n",
        "    JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n",
        "fi\n",
        "\n",
        "if [ -z \"$JAVA_HOME\" ]; then\n",
        "  javaExecutable=\"`which javac`\"\n",
        "  if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : '\\([^ ]*\\)'`\" = \"no\" ]; then\n",
        "    # readlink(1) is not available as standard on Solaris 10.\n",
        "    readLink=`which readlink`\n",
        "    if [ ! `expr \"$readLink\" : '\\([^ ]*\\)'` = \"no\" ]; then\n",
        "      if $darwin ; then\n",
        "        javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n",
        "        javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"\n",
        "      else\n",
        "        javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"\n",
        "      fi\n",
        "      javaHome=\"`dirname \\\"$javaExecutable\\\"`\"\n",
        "      javaHome=`expr \"$javaHome\" : '\\(.*\\)/bin'`\n",
        "      JAVA_HOME=\"$javaHome\"\n",
        "      export JAVA_HOME\n",
        "    fi\n",
        "  fi\n",
        "fi\n",
        "\n",
        "if [ -z \"$JAVACMD\" ] ; then\n",
        "  if [ -n \"$JAVA_HOME\"  ] ; then\n",
        "    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n",
        "      # IBM's JDK on AIX uses strange locations for the executables\n",
        "      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n",
        "    else\n",
        "      JAVACMD=\"$JAVA_HOME/bin/java\"\n",
        "    fi\n",
        "  else\n",
        "    JAVACMD=\"`\\\\unset -f command; \\\\command -v java`\"\n",
        "  fi\n",
        "fi\n",
        "\n",
        "if [ ! -x \"$JAVACMD\" ] ; then\n",
        "  echo \"Error: JAVA_HOME is not defined correctly.\" >&2\n",
        "  echo \"  We cannot execute $JAVACMD\" >&2\n",
        "  exit 1\n",
        "fi\n",
        "\n",
        "if [ -z \"$JAVA_HOME\" ] ; then\n",
        "  echo \"Warning: JAVA_HOME environment variable is not set.\"\n",
        "fi\n",
        "\n",
        "CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher\n",
        "\n",
        "# traverses directory structure from process work directory to filesystem root\n",
        "# first directory with .mvn subdirectory is considered project base directory\n",
        "find_maven_basedir() {\n",
        "\n",
        "  if [ -z \"$1\" ]\n",
        "  then\n",
        "    echo \"Path not specified to find_maven_basedir\"\n",
        "    return 1\n",
        "  fi\n",
        "\n",
        "  basedir=\"$1\"\n",
        "  wdir=\"$1\"\n",
        "  while [ \"$wdir\" != '/' ] ; do\n",
        "    if [ -d \"$wdir\"/.mvn ] ; then\n",
        "      basedir=$wdir\n",
        "      break\n",
        "    fi\n",
        "    # workaround for JBEAP-8937 (on Solaris 10/Sparc)\n",
        "    if [ -d \"${wdir}\" ]; then\n",
        "      wdir=`cd \"$wdir/..\"; pwd`\n",
        "    fi\n",
        "    # end of workaround\n",
        "  done\n",
        "  echo \"${basedir}\"\n",
        "}\n",
        "\n",
        "# concatenates all lines of a file\n",
        "concat_lines() {\n",
        "  if [ -f \"$1\" ]; then\n",
        "    echo \"$(tr -s '\\n' ' ' < \"$1\")\"\n",
        "  fi\n",
        "}\n",
        "\n",
        "BASE_DIR=`find_maven_basedir \"$(pwd)\"`\n",
        "if [ -z \"$BASE_DIR\" ]; then\n",
        "  exit 1;\n",
        "fi\n",
        "\n",
        "##########################################################################################\n",
        "# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central\n",
        "# This allows using the maven wrapper in projects that prohibit checking in binary data.\n",
        "##########################################################################################\n",
        "if [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then\n",
        "    if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "      echo \"Found .mvn/wrapper/maven-wrapper.jar\"\n",
        "    fi\n",
        "else\n",
        "    if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "      echo \"Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"\n",
        "    fi\n",
        "    if [ -n \"$MVNW_REPOURL\" ]; then\n",
        "      jarUrl=\"$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n",
        "    else\n",
        "      jarUrl=\"https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar\"\n",
        "    fi\n",
        "    while IFS=\"=\" read key value; do\n",
        "      case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;\n",
        "      esac\n",
        "    done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"\n",
        "    if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "      echo \"Downloading from: $jarUrl\"\n",
        "    fi\n",
        "    wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"\n",
        "    if $cygwin; then\n",
        "      wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`\n",
        "    fi\n",
        "\n",
        "    if command -v wget > /dev/null; then\n",
        "        if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "          echo \"Found wget ... using wget\"\n",
        "        fi\n",
        "        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n",
        "            wget \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n",
        "        else\n",
        "            wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\" || rm -f \"$wrapperJarPath\"\n",
        "        fi\n",
        "    elif command -v curl > /dev/null; then\n",
        "        if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "          echo \"Found curl ... using curl\"\n",
        "        fi\n",
        "        if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then\n",
        "            curl -o \"$wrapperJarPath\" \"$jarUrl\" -f\n",
        "        else\n",
        "            curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f\n",
        "        fi\n",
        "\n",
        "    else\n",
        "        if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "          echo \"Falling back to using Java to download\"\n",
        "        fi\n",
        "        javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"\n",
        "        # For Cygwin, switch paths to Windows format before running javac\n",
        "        if $cygwin; then\n",
        "          javaClass=`cygpath --path --windows \"$javaClass\"`\n",
        "        fi\n",
        "        if [ -e \"$javaClass\" ]; then\n",
        "            if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n",
        "                if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "                  echo \" - Compiling MavenWrapperDownloader.java ...\"\n",
        "                fi\n",
        "                # Compiling the Java class\n",
        "                (\"$JAVA_HOME/bin/javac\" \"$javaClass\")\n",
        "            fi\n",
        "            if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then\n",
        "                # Running the downloader\n",
        "                if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "                  echo \" - Running MavenWrapperDownloader.java ...\"\n",
        "                fi\n",
        "                (\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")\n",
        "            fi\n",
        "        fi\n",
        "    fi\n",
        "fi\n",
        "##########################################################################################\n",
        "# End of extension\n",
        "##########################################################################################\n",
        "\n",
        "export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}\n",
        "if [ \"$MVNW_VERBOSE\" = true ]; then\n",
        "  echo $MAVEN_PROJECTBASEDIR\n",
        "fi\n",
        "MAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"\n",
        "\n",
        "# For Cygwin, switch paths to Windows format before running java\n",
        "if $cygwin; then\n",
        "  [ -n \"$M2_HOME\" ] &&\n",
        "    M2_HOME=`cygpath --path --windows \"$M2_HOME\"`\n",
        "  [ -n \"$JAVA_HOME\" ] &&\n",
        "    JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`\n",
        "  [ -n \"$CLASSPATH\" ] &&\n",
        "    CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`\n",
        "  [ -n \"$MAVEN_PROJECTBASEDIR\" ] &&\n",
        "    MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`\n",
        "fi\n",
        "\n",
        "# Provide a \"standardized\" way to retrieve the CLI args that will\n",
        "# work with both Windows and non-Windows executions.\n",
        "MAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"\n",
        "export MAVEN_CMD_LINE_ARGS\n",
        "\n",
        "WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain\n",
        "\n",
        "exec \"$JAVACMD\" \\\n",
        "  $MAVEN_OPTS \\\n",
        "  $MAVEN_DEBUG_OPTS \\\n",
        "  -classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\\n",
        "  \"-Dmaven.home=${M2_HOME}\" \\\n",
        "  \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\\n",
        "  ${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\""
      ],
      "metadata": {
        "id": "CzYBUH1oI5ls"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}